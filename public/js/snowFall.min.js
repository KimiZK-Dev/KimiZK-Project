const requestAnimationFrame =
	window.requestAnimationFrame ||
	window.mozRequestAnimationFrame ||
	window.webkitRequestAnimationFrame ||
	window.msRequestAnimationFrame;

const transformProperty = (() => {
	const transforms = [
		"transform",
		"msTransform",
		"webkitTransform",
		"mozTransform",
		"oTransform",
	];
	return transforms.find(
		(t) => typeof document.body.style[t] !== "undefined"
	);
})();

const snowflakes = [];
let browserWidth;
let browserHeight;
const numberOfSnowflakes = 50;
let resetPosition = false;

window.addEventListener("DOMContentLoaded", generateSnowflakes);
window.addEventListener("resize", () => (resetPosition = true));

class Snowflake {
	constructor(element, radius, speed, xPos, yPos) {
		this.element = element;
		this.radius = radius;
		this.speed = speed;
		this.xPos = xPos;
		this.yPos = yPos;
		this.counter = 0;
		this.sign = Math.random() < 0.5 ? 1 : -1;

		Object.assign(this.element.style, {
			opacity: 0.5 + Math.random(),
			fontSize: `${4 + Math.random() * 30}px`,
		});
	}

	update() {
		this.counter += this.speed / 5000;
		this.xPos += (this.sign * this.speed * Math.cos(this.counter)) / 40;
		this.yPos += Math.sin(this.counter) / 40 + this.speed / 30;

		setTranslate3DTransform(
			this.element,
			Math.round(this.xPos),
			Math.round(this.yPos)
		);

		if (this.yPos > browserHeight) {
			this.yPos = -50;
		}
	}
}

function setTranslate3DTransform(element, x, y) {
	element.style[transformProperty] = `translate3d(${x}px, ${y}px, 0)`;
}

function generateSnowflakes() {
	const template = document.querySelector(".snowflake");
	const container = template.parentNode;
	browserWidth = document.documentElement.clientWidth;
	browserHeight = document.documentElement.clientHeight;

	for (let i = 0; i < numberOfSnowflakes; i++) {
		const clone = template.cloneNode(true);
		container.appendChild(clone);

		const xPos = getPosition(50, browserWidth);
		const yPos = getPosition(50, browserHeight);
		const speed = 5 + Math.random() * 40;
		const radius = 4 + Math.random() * 10;

		snowflakes.push(new Snowflake(clone, radius, speed, xPos, yPos));
	}
	container.removeChild(template);
	moveSnowflakes();
}

function moveSnowflakes() {
	snowflakes.forEach((snowflake) => snowflake.update());

	if (resetPosition) {
		browserWidth = document.documentElement.clientWidth;
		browserHeight = document.documentElement.clientHeight;

		snowflakes.forEach((snowflake) => {
			snowflake.xPos = getPosition(50, browserWidth);
			snowflake.yPos = getPosition(50, browserHeight);
		});
		resetPosition = false;
	}

	requestAnimationFrame(moveSnowflakes);
}

function getPosition(offset, size) {
	return Math.round(-offset + Math.random() * (size + 20 * offset));
}
